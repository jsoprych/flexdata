{
  "version": 3,
  "sources": ["../../../src/core/BaseControl.ts", "../../../src/core/components/FDGrid.ts"],
  "sourcesContent": ["// src/core/BaseControl.ts\nexport abstract class BaseControl extends HTMLElement {\n  protected shadow: ShadowRoot;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: 'open' });\n  }\n\n  connectedCallback() {\n    this.render();\n    this.attachEventListeners();\n  }\n\n  disconnectedCallback() {\n    this.detachEventListeners();\n  }\n\n  static get observedAttributes(): string[] {\n    return [];\n  }\n\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (oldValue !== newValue) {\n      const prop = this.attributeToProperty(name);\n      if (prop && (this as any)[prop] !== newValue) {\n        (this as any)[prop] = newValue;\n      }\n    }\n  }\n\n  protected attributeToProperty(attr: string): string | null {\n    return null; // override in subclasses\n  }\n\n  protected abstract render(): void;\n\n  protected attachEventListeners(): void {}\n  protected detachEventListeners(): void {}\n}\n", "// src/core/components/FDGrid.ts\nimport { BaseControl } from '../BaseControl';\n\nexport class FDGrid extends BaseControl {\n  private _rowsPerPage: number = 10;\n\n  static get observedAttributes() {\n    return ['rows-per-page'];\n  }\n\n  get rowsPerPage() {\n    return this._rowsPerPage;\n  }\n\n  set rowsPerPage(value: number) {\n    if (value !== this._rowsPerPage) {\n      this._rowsPerPage = value;\n      this.setAttribute('rows-per-page', value.toString());\n      this.render();\n    }\n  }\n\n  protected attributeToProperty(attr: string): string | null {\n    return attr === 'rows-per-page' ? 'rowsPerPage' : null;\n  }\n\n  protected render() {\n    this.shadow.innerHTML = `\n      <style>\n        :host { display: block; padding: 8px; background: #f9f9f9; }\n        .grid-container { border: 1px solid #ccc; padding: 10px; }\n      </style>\n      <div class=\"grid-container\">\n        <slot>Default Grid Content (Rows per page: ${this.rowsPerPage})</slot>\n      </div>\n    `;\n  }\n\n  protected attachEventListeners() {\n    this.shadow.addEventListener('click', this.onClick);\n  }\n\n  protected detachEventListeners() {\n    this.shadow.removeEventListener('click', this.onClick);\n  }\n\n  private onClick = (event: Event) => {\n    this.dispatchEvent(new CustomEvent('grid-clicked', {\n      detail: { message: 'Grid was clicked!' },\n      bubbles: true,\n      composed: true\n    }));\n  };\n}\n\ncustomElements.define('fd-grid', FDGrid);\n"],
  "mappings": ";;;;;;;AACO,MAAe,cAAf,cAAmC,YAAY;AAAA,IAGpD,cAAc;AACZ,YAAM;AAHR,0BAAU;AAIR,WAAK,SAAS,KAAK,aAAa,EAAE,MAAM,OAAO,CAAC;AAAA,IAClD;AAAA,IAEA,oBAAoB;AAClB,WAAK,OAAO;AACZ,WAAK,qBAAqB;AAAA,IAC5B;AAAA,IAEA,uBAAuB;AACrB,WAAK,qBAAqB;AAAA,IAC5B;AAAA,IAEA,WAAW,qBAA+B;AACxC,aAAO,CAAC;AAAA,IACV;AAAA,IAEA,yBAAyB,MAAc,UAAkB,UAAkB;AACzE,UAAI,aAAa,UAAU;AACzB,cAAM,OAAO,KAAK,oBAAoB,IAAI;AAC1C,YAAI,QAAS,KAAa,IAAI,MAAM,UAAU;AAC5C,UAAC,KAAa,IAAI,IAAI;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,IAEU,oBAAoB,MAA6B;AACzD,aAAO;AAAA,IACT;AAAA,IAIU,uBAA6B;AAAA,IAAC;AAAA,IAC9B,uBAA6B;AAAA,IAAC;AAAA,EAC1C;;;ACpCO,MAAM,SAAN,cAAqB,YAAY;AAAA,IAAjC;AAAA;AACL,0BAAQ,gBAAuB;AA0C/B,0BAAQ,WAAU,CAAC,UAAiB;AAClC,aAAK,cAAc,IAAI,YAAY,gBAAgB;AAAA,UACjD,QAAQ,EAAE,SAAS,oBAAoB;AAAA,UACvC,SAAS;AAAA,UACT,UAAU;AAAA,QACZ,CAAC,CAAC;AAAA,MACJ;AAAA;AAAA,IA9CA,WAAW,qBAAqB;AAC9B,aAAO,CAAC,eAAe;AAAA,IACzB;AAAA,IAEA,IAAI,cAAc;AAChB,aAAO,KAAK;AAAA,IACd;AAAA,IAEA,IAAI,YAAY,OAAe;AAC7B,UAAI,UAAU,KAAK,cAAc;AAC/B,aAAK,eAAe;AACpB,aAAK,aAAa,iBAAiB,MAAM,SAAS,CAAC;AACnD,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAAA,IAEU,oBAAoB,MAA6B;AACzD,aAAO,SAAS,kBAAkB,gBAAgB;AAAA,IACpD;AAAA,IAEU,SAAS;AACjB,WAAK,OAAO,YAAY,qQAMyB,YAAK,aAAW;AAAA,IAGnE;AAAA,IAEU,uBAAuB;AAC/B,WAAK,OAAO,iBAAiB,SAAS,KAAK,OAAO;AAAA,IACpD;AAAA,IAEU,uBAAuB;AAC/B,WAAK,OAAO,oBAAoB,SAAS,KAAK,OAAO;AAAA,IACvD;AAAA,EASF;AAEA,iBAAe,OAAO,WAAW,MAAM;",
  "names": []
}
