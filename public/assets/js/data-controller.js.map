{
  "version": 3,
  "sources": ["../../../src/data-controller.ts"],
  "sourcesContent": ["export class DataController {\n    private static instance: DataController;\n    private data: Record<string, string>[] = [];\n    private filteredData: Record<string, string>[] = [];\n    private sortColumn: string | null = null;\n    private sortDirection: 'asc' | 'desc' = 'asc';\n    private selectedRow: Record<string, string> | null = null;\n    private listeners: { [key: string]: ((data: any) => void)[] } = {};\n\n    private constructor() {}\n\n    static getInstance(): DataController {\n        if (!DataController.instance) {\n            DataController.instance = new DataController();\n        }\n        return DataController.instance;\n    }\n\n    async loadData(url: string) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            this.data = await response.json();\n            this.filteredData = [...this.data];\n            this.notify('data-updated', this.filteredData);\n        } catch (error) {\n            console.error('Fetch error:', error);\n            this.notify('error', { message: `Error loading data: ${error.message}` });\n        }\n    }\n\n    setFilter(filter: string) {\n        const headers = this.data.length > 0 ? Object.keys(this.data[0]) : [];\n        this.filteredData = this.data.filter(row =>\n            headers.some(header => (row[header] || '').toLowerCase().includes(filter.toLowerCase()))\n        );\n        this.notify('data-updated', this.filteredData);\n    }\n\n    setSort(column: string, direction: 'asc' | 'desc') {\n        this.sortColumn = column;\n        this.sortDirection = direction;\n        this.filteredData.sort((a, b) => {\n            const aValue = a[column] ?? '';\n            const bValue = b[column] ?? '';\n            const numericColumns = ['customer_id', 'tax_id'];\n            const isNumericColumn = numericColumns.includes(column);\n            const aIsNumber = !isNaN(parseFloat(aValue)) && isFinite(parseFloat(aValue));\n            const bIsNumber = !isNaN(parseFloat(bValue)) && isFinite(parseFloat(bValue));\n            if (isNumericColumn && aIsNumber && bIsNumber) {\n                return this.sortDirection === 'asc'\n                    ? parseFloat(aValue) - parseFloat(bValue)\n                    : parseFloat(bValue) - parseFloat(aValue);\n            }\n            const aStr = aValue.toString().toLowerCase();\n            const bStr = bValue.toString().toLowerCase();\n            return this.sortDirection === 'asc'\n                ? aStr.localeCompare(bStr)\n                : bStr.localeCompare(aStr);\n        });\n        this.notify('data-updated', this.filteredData);\n    }\n\n    setSelectedRow(row: Record<string, string> | null) {\n        this.selectedRow = row;\n        this.notify('row-selected', this.selectedRow);\n    }\n\n    getFilteredData(): Record<string, string>[] {\n        return this.filteredData;\n    }\n\n    getSelectedRow(): Record<string, string> | null {\n        return this.selectedRow;\n    }\n\n    getSortColumn(): string | null {\n        return this.sortColumn;\n    }\n\n    getSortDirection(): 'asc' | 'desc' {\n        return this.sortDirection;\n    }\n\n    on(event: string, callback: (data: any) => void) {\n        if (!this.listeners[event]) {\n            this.listeners[event] = [];\n        }\n        this.listeners[event].push(callback);\n    }\n\n    off(event: string, callback: (data: any) => void) {\n        if (this.listeners[event]) {\n            this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n        }\n    }\n\n    private notify(event: string, data: any) {\n        if (this.listeners[event]) {\n            this.listeners[event].forEach(callback => callback(data));\n        }\n    }\n}"],
  "mappings": "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",
  "names": ["_DataController", "__publicField", "url", "response", "error", "filter", "headers", "row", "header", "column", "direction", "a", "b", "_a", "_b", "aValue", "bValue", "isNumericColumn", "aIsNumber", "bIsNumber", "aStr", "bStr", "event", "callback", "cb", "data", "DataController"]
}
