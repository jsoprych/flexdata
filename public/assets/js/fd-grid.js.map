{
  "version": 3,
  "sources": ["../../../src/components/fd-grid.ts"],
  "sourcesContent": ["class FDGrid extends HTMLElement {\n    private shadow: ShadowRoot;\n    private data: Record<string, string>[] = [];\n    private filteredData: Record<string, string>[] = [];\n    private sortColumn: string | null = null;\n    private sortDirection: 'asc' | 'desc' = 'asc';\n    private currentPage: number = 1;\n    private rowsPerPage: number = 10;\n    private showJson: boolean = false;\n\n    constructor() {\n        super();\n        this.shadow = this.attachShadow({ mode: 'open' });\n        this.render();\n    }\n\n    static get observedAttributes() {\n        return ['data-src', 'rows-per-page'];\n    }\n\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {\n        if (name === 'data-src' && newValue && oldValue !== newValue) {\n            this.loadData(newValue);\n        }\n        if (name === 'rows-per-page') {\n            this.rowsPerPage = parseInt(newValue || '10', 10) || 10;\n            this.currentPage = 1;\n            this.render();\n        }\n    }\n\n    connectedCallback() {\n        const dataSrc = this.getAttribute('data-src');\n        if (dataSrc) {\n            this.loadData(dataSrc);\n        }\n    }\n\n    private async loadData(url: string) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            this.data = await response.json();\n            this.filteredData = [...this.data];\n            this.render();\n        } catch (error) {\n            console.error('Fetch error:', error);\n            this.shadow.innerHTML = `\n                <style>\n                    .error { color: var(--text-error, #d32f2f); font-family: var(--font-family, 'Helvetica', 'Arial', sans-serif); }\n                </style>\n                <div class=\"error\">Error loading data: ${error.message}</div>\n            `;\n        }\n    }\n\n    private render() {\n        const headers = this.data.length > 0 ? Object.keys(this.data[0]) : [];\n        const start = (this.currentPage - 1) * this.rowsPerPage;\n        const end = start + this.rowsPerPage;\n        const paginatedData = this.filteredData.slice(start, end);\n        const totalPages = Math.ceil(this.filteredData.length / this.rowsPerPage);\n\n        this.shadow.innerHTML = `\n            <style>\n                :host {\n                    display: block;\n                    font-family: var(--font-family, 'Helvetica', 'Arial', sans-serif);\n                }\n                .grid-container {\n                    background: var(--bg-primary, #ffffff);\n                    border-radius: var(--border-radius, 8px);\n                    box-shadow: var(--shadow, 0 2px 4px rgba(0, 0, 0, 0.05));\n                    padding: var(--padding, 16px);\n                }\n                .controls {\n                    margin-bottom: 16px;\n                    display: flex;\n                    gap: 16px;\n                    align-items: center;\n                }\n                input[type=\"text\"] {\n                    padding: 8px;\n                    border: 1px solid var(--border-color, #d8dee9);\n                    border-radius: var(--border-radius, 8px);\n                    font-size: var(--font-size-cell, 14px);\n                }\n                select {\n                    padding: 8px;\n                    border: 1px solid var(--border-color, #d8dee9);\n                    border-radius: var(--border-radius, 8px);\n                }\n                table {\n                    width: 100%;\n                    border-collapse: collapse;\n                    background: var(--bg-primary, #ffffff);\n                }\n                th {\n                    background: var(--bg-header, #d9e6f2);\n                    padding: 12px;\n                    font-weight: 600;\n                    text-align: left;\n                    cursor: pointer;\n                    user-select: none;\n                    border-bottom: 1px solid var(--border-color, #d8dee9);\n                }\n                th:hover {\n                    background: var(--bg-header-hover, #c8d7e8);\n                }\n                td {\n                    padding: 12px;\n                    border-bottom: 1px solid var(--border-color, #d8dee9);\n                    font-size: var(--font-size-cell, 14px);\n                }\n                tr:nth-child(even) {\n                    background: var(--bg-row-even, #e6f0fa);\n                }\n                tr:hover {\n                    background: var(--bg-cell-bubble, #f0f4f8);\n                    cursor: pointer;\n                }\n                .pagination {\n                    margin-top: 16px;\n                    display: flex;\n                    gap: 8px;\n                    justify-content: center;\n                    align-items: center;\n                }\n                button {\n                    padding: 8px 16px;\n                    border: 1px solid var(--border-color, #d8dee9);\n                    border-radius: var(--border-radius, 8px);\n                    background: var(--bg-primary, #ffffff);\n                    color: var(--text-button, #81a1c1);\n                    cursor: pointer;\n                }\n                button:hover {\n                    background: var(--bg-header-hover, #c8d7e8);\n                }\n                button:disabled {\n                    color: var(--text-disabled, #a3be8c);\n                    cursor: not-allowed;\n                }\n                .json-view {\n                    margin-top: 16px;\n                    padding: 8px;\n                    background: var(--bg-row-even, #e6f0fa);\n                    border: 1px solid var(--border-color, #d8dee9);\n                    border-radius: var(--border-radius, 8px);\n                    max-height: 300px;\n                    overflow: auto;\n                    font-family: monospace;\n                    font-size: var(--font-size-cell, 14px);\n                }\n                @media (max-width: 768px) {\n                    .grid-container {\n                        padding: var(--padding-mobile, 8px);\n                    }\n                    th, td {\n                        padding: 8px;\n                        font-size: var(--font-size-cell-mobile, 13px);\n                    }\n                    .controls {\n                        flex-direction: column;\n                        align-items: stretch;\n                    }\n                    .json-view {\n                        font-size: var(--font-size-cell-mobile, 13px);\n                    }\n                }\n            </style>\n            <div class=\"grid-container\" role=\"grid\">\n                <div class=\"controls\">\n                    <input type=\"text\" placeholder=\"Filter...\" aria-label=\"Filter grid data\">\n                    <select aria-label=\"Rows per page\">\n                        <option value=\"5\" ${this.rowsPerPage === 5 ? 'selected' : ''}>5</option>\n                        <option value=\"10\" ${this.rowsPerPage === 10 ? 'selected' : ''}>10</option>\n                        <option value=\"20\" ${this.rowsPerPage === 20 ? 'selected' : ''}>20</option>\n                        <option value=\"50\" ${this.rowsPerPage === 50 ? 'selected' : ''}>50</option>\n                    </select>\n                    <button class=\"toggle-json\">Toggle JSON</button>\n                </div>\n                <table>\n                    <thead>\n                        <tr>\n                            ${headers.map(header => `\n                                <th aria-sort=\"${this.sortColumn === header ? this.sortDirection : 'none'}\">\n                                    ${header.replace(/_/g, ' ').replace(/\\b\\w/g, c => c.toUpperCase())}\n                                    ${this.sortColumn === header ? (this.sortDirection === 'asc' ? '\u2191' : '\u2193') : ''}\n                                </th>\n                            `).join('')}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${paginatedData.map(row => `\n                            <tr class=\"selectable\">\n                                ${headers.map(header => `<td>${row[header] || ''}</td>`).join('')}\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n                <div class=\"pagination\">\n                    <button ${this.currentPage === 1 ? 'disabled' : ''}>Previous</button>\n                    <span>Page ${this.currentPage} of ${totalPages}</span>\n                    <button ${this.currentPage === totalPages ? 'disabled' : ''}>Next</button>\n                </div>\n                ${this.showJson && this.data.length > 0 ? `\n                    <pre class=\"json-view\">${JSON.stringify(this.data, null, 2)}</pre>\n                ` : ''}\n            </div>\n        `;\n\n        this.shadow.querySelector('input')?.addEventListener('input', (e) => {\n            const filter = (e.target as HTMLInputElement).value.toLowerCase();\n            this.filteredData = this.data.filter(row =>\n                headers.some(header => (row[header] || '').toLowerCase().includes(filter))\n            );\n            this.currentPage = 1;\n            this.render();\n        });\n\n        this.shadow.querySelector('select')?.addEventListener('change', (e) => {\n            this.rowsPerPage = parseInt((e.target as HTMLSelectElement).value, 10);\n            this.currentPage = 1;\n            this.render();\n        });\n\n        this.shadow.querySelectorAll('th').forEach((th, index) => {\n            th.addEventListener('click', () => {\n                const header = headers[index];\n                if (this.sortColumn === header) {\n                    this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n                } else {\n                    this.sortColumn = header;\n                    this.sortDirection = 'asc';\n                }\n                this.filteredData.sort((a, b) => {\n                    const aValue = a[header] ?? '';\n                    const bValue = b[header] ?? '';\n                    const numericColumns = ['customer_id', 'tax_id'];\n                    const isNumericColumn = numericColumns.includes(header);\n                    const aIsNumber = !isNaN(parseFloat(aValue)) && isFinite(parseFloat(aValue));\n                    const bIsNumber = !isNaN(parseFloat(bValue)) && isFinite(parseFloat(bValue));\n                    if (isNumericColumn && aIsNumber && bIsNumber) {\n                        return this.sortDirection === 'asc'\n                            ? parseFloat(aValue) - parseFloat(bValue)\n                            : parseFloat(bValue) - parseFloat(aValue);\n                    }\n                    const aStr = aValue.toString().toLowerCase();\n                    const bStr = bValue.toString().toLowerCase();\n                    return this.sortDirection === 'asc'\n                        ? aStr.localeCompare(bStr)\n                        : bStr.localeCompare(aStr);\n                });\n                this.render();\n            });\n        });\n\n        this.shadow.querySelectorAll('.pagination button').forEach(button => {\n            button.addEventListener('click', () => {\n                if (button.textContent === 'Previous' && this.currentPage > 1) {\n                    this.currentPage--;\n                } else if (button.textContent === 'Next' && this.currentPage < totalPages) {\n                    this.currentPage++;\n                }\n                this.render();\n            });\n        });\n\n        this.shadow.querySelectorAll('tr.selectable').forEach(row => {\n            row.addEventListener('click', () => {\n                const rowIndex = Array.from(this.shadow.querySelectorAll('tr.selectable')).indexOf(row);\n                const rowData = paginatedData[rowIndex];\n                window.dispatchEvent(new CustomEvent('row-selected', { detail: rowData }));\n            });\n        });\n\n        this.shadow.querySelector('.toggle-json')?.addEventListener('click', () => {\n            this.showJson = !this.showJson;\n            this.render();\n        });\n    }\n}\n\ncustomElements.define('fd-grid', FDGrid);"],
  "mappings": "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",
  "names": ["FDGrid", "__publicField", "name", "oldValue", "newValue", "dataSrc", "url", "response", "error", "_a", "_b", "_c", "headers", "start", "end", "paginatedData", "totalPages", "header", "c", "row", "filter", "th", "index", "a", "b", "aValue", "bValue", "isNumericColumn", "aIsNumber", "bIsNumber", "aStr", "bStr", "button", "rowIndex", "rowData"]
}
