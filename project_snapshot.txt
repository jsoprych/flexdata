PROJECT SNAPSHOT - Project: flexdata
Created: 2025-07-13 04:11:18
Root Directory: /home/john/CODE/HTML-COMPONENTS/PROJECTS/flexdata
================================================================================

PROJECT STRUCTURE
--------------------------------------------------------------------------------
[DIR] flexdata/
  [FILE] build.js
  [FILE] package.json
  [FILE] package-lock.json
  [FILE] project_snapshot.txt
  [FILE] README.md
  [FILE] tsconfig.json
[DIR] src/
 [DIR] components/
   [FILE] csv-grid.ts
[DIR] node_modules/
  [FILE] .package-lock.json
[DIR] .git/
[DIR] public/
  [FILE] index.html
 [DIR] api/
   [FILE] data.php
 [DIR] assets/
  [DIR] css/
  [DIR] js/
    [FILE] csv-grid.js

================================================================================

FILE CONTENTS
--------------------------------------------------------------------------------

FILE: build.js
--------------------------------------------------------------------------------
const esbuild = require('esbuild');
const fs = require('fs');

const isWatch = process.argv.includes('--watch');

if (!fs.existsSync('public/assets/js')) {
  fs.mkdirSync('public/assets/js', { recursive: true });
}

async function build() {
  const context = await esbuild.context({
    entryPoints: [
      { in: 'src/components/csv-grid.ts', out: 'csv-grid' }
    ],
    outdir: 'public/assets/js',
    bundle: true,
    format: 'iife',
    target: 'esnext',
    platform: 'browser',
    minify: !isWatch,
    sourcemap: isWatch,
  });

  if (isWatch) {
    await context.watch();
    console.log('Watching for changes...');
  } else {
    await context.rebuild();
    console.log('Build succeeded');
    await context.dispose();
  }
}

build().catch((error) => {
  console.error('Build failed:', error);
  process.exit(1);
});--------------------------------------------------------------------------------

FILE: package.json
--------------------------------------------------------------------------------
{
  "name": "flexdata",
  "version": "1.0.0",
  "scripts": {
    "build": "node build.js",
    "serve": "php -S localhost:8000 -t public",
    "watch": "node build.js --watch"
  },
  "dependencies": {
    "esbuild": "^0.21.5"
  }
}--------------------------------------------------------------------------------

FILE: package-lock.json
--------------------------------------------------------------------------------
{
  "name": "csv-grid-test",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "csv-grid-test",
      "version": "1.0.0",
      "devDependencies": {
        "esbuild": "^0.25.6",
        "typescript": "^5.8.3"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.6.tgz",
      "integrity": "sha512-ShbM/3XxwuxjFiuVBHA+d3j5dyac0aEVVq1oluIDf71hUw0aRF59dV/efUsIwFnR6m8JNM2FjZOzmaZ8yG61kw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.6.tgz",
      "integrity": "sha512-S8ToEOVfg++AU/bHwdksHNnyLyVM+eMVAOf6yRKFitnwnbwwPNqKr3srzFRe7nzV69RQKb5DgchIX5pt3L53xg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.6.tgz",
      "integrity": "sha512-hd5zdUarsK6strW+3Wxi5qWws+rJhCCbMiC9QZyzoxfk5uHRIE8T287giQxzVpEvCwuJ9Qjg6bEjcRJcgfLqoA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.6.tgz",
      "integrity": "sha512-0Z7KpHSr3VBIO9A/1wcT3NTy7EB4oNC4upJ5ye3R7taCc2GUdeynSLArnon5G8scPwaU866d3H4BCrE5xLW25A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.6.tgz",
      "integrity": "sha512-FFCssz3XBavjxcFxKsGy2DYK5VSvJqa6y5HXljKzhRZ87LvEi13brPrf/wdyl/BbpbMKJNOr1Sd0jtW4Ge1pAA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.6.tgz",
      "integrity": "sha512-GfXs5kry/TkGM2vKqK2oyiLFygJRqKVhawu3+DOCk7OxLy/6jYkWXhlHwOoTb0WqGnWGAS7sooxbZowy+pK9Yg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.6.tgz",
      "integrity": "sha512-aoLF2c3OvDn2XDTRvn8hN6DRzVVpDlj2B/F66clWd/FHLiHaG3aVZjxQX2DYphA5y/evbdGvC6Us13tvyt4pWg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.6.tgz",
      "integrity": "sha512-2SkqTjTSo2dYi/jzFbU9Plt1vk0+nNg8YC8rOXXea+iA3hfNJWebKYPs3xnOUf9+ZWhKAaxnQNUf2X9LOpeiMQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.6.tgz",
      "integrity": "sha512-SZHQlzvqv4Du5PrKE2faN0qlbsaW/3QQfUUc6yO2EjFcA83xnwm91UbEEVx4ApZ9Z5oG8Bxz4qPE+HFwtVcfyw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.6.tgz",
      "integrity": "sha512-b967hU0gqKd9Drsh/UuAm21Khpoh6mPBSgz8mKRq4P5mVK8bpA+hQzmm/ZwGVULSNBzKdZPQBRT3+WuVavcWsQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.6.tgz",
      "integrity": "sha512-aHWdQ2AAltRkLPOsKdi3xv0mZ8fUGPdlKEjIEhxCPm5yKEThcUjHpWB1idN74lfXGnZ5SULQSgtr5Qos5B0bPw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.6.tgz",
      "integrity": "sha512-VgKCsHdXRSQ7E1+QXGdRPlQ/e08bN6WMQb27/TMfV+vPjjTImuT9PmLXupRlC90S1JeNNW5lzkAEO/McKeJ2yg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.6.tgz",
      "integrity": "sha512-WViNlpivRKT9/py3kCmkHnn44GkGXVdXfdc4drNmRl15zVQ2+D2uFwdlGh6IuK5AAnGTo2qPB1Djppj+t78rzw==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.6.tgz",
      "integrity": "sha512-wyYKZ9NTdmAMb5730I38lBqVu6cKl4ZfYXIs31Baf8aoOtB4xSGi3THmDYt4BTFHk7/EcVixkOV2uZfwU3Q2Jw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.6.tgz",
      "integrity": "sha512-KZh7bAGGcrinEj4qzilJ4hqTY3Dg2U82c8bv+e1xqNqZCrCyc+TL9AUEn5WGKDzm3CfC5RODE/qc96OcbIe33w==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.6.tgz",
      "integrity": "sha512-9N1LsTwAuE9oj6lHMyyAM+ucxGiVnEqUdp4v7IaMmrwb06ZTEVCIs3oPPplVsnjPfyjmxwHxHMF8b6vzUVAUGw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.6.tgz",
      "integrity": "sha512-A6bJB41b4lKFWRKNrWoP2LHsjVzNiaurf7wyj/XtFNTsnPuxwEBWHLty+ZE0dWBKuSK1fvKgrKaNjBS7qbFKig==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.6.tgz",
      "integrity": "sha512-IjA+DcwoVpjEvyxZddDqBY+uJ2Snc6duLpjmkXm/v4xuS3H+3FkLZlDm9ZsAbF9rsfP3zeA0/ArNDORZgrxR/Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.6.tgz",
      "integrity": "sha512-dUXuZr5WenIDlMHdMkvDc1FAu4xdWixTCRgP7RQLBOkkGgwuuzaGSYcOpW4jFxzpzL1ejb8yF620UxAqnBrR9g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.6.tgz",
      "integrity": "sha512-l8ZCvXP0tbTJ3iaqdNf3pjaOSd5ex/e6/omLIQCVBLmHTlfXW3zAxQ4fnDmPLOB1x9xrcSi/xtCWFwCZRIaEwg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.6.tgz",
      "integrity": "sha512-hKrmDa0aOFOr71KQ/19JC7az1P0GWtCN1t2ahYAf4O007DHZt/dW8ym5+CUdJhQ/qkZmI1HAF8KkJbEFtCL7gw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openharmony-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.6.tgz",
      "integrity": "sha512-+SqBcAWoB1fYKmpWoQP4pGtx+pUUC//RNYhFdbcSA16617cchuryuhOCRpPsjCblKukAckWsV+aQ3UKT/RMPcA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.6.tgz",
      "integrity": "sha512-dyCGxv1/Br7MiSC42qinGL8KkG4kX0pEsdb0+TKhmJZgCUDBGmyo1/ArCjNGiOLiIAgdbWgmWgib4HoCi5t7kA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.6.tgz",
      "integrity": "sha512-42QOgcZeZOvXfsCBJF5Afw73t4veOId//XD3i+/9gSkhSV6Gk3VPlWncctI+JcOyERv85FUo7RxuxGy+z8A43Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.6.tgz",
      "integrity": "sha512-4AWhgXmDuYN7rJI6ORB+uU9DHLq/erBbuMoAuB4VWJTu5KtCgcKYPynF0YI1VkBNuEfjNlLrFr9KZPJzrtLkrQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.6.tgz",
      "integrity": "sha512-NgJPHHbEpLQgDH2MjQu90pzW/5vvXIZ7KOnPyNBm92A6WgZ/7b6fJyUBjoumLqeOQQGqY2QjQxRo97ah4Sj0cA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.6.tgz",
      "integrity": "sha512-GVuzuUwtdsghE3ocJ9Bs8PNoF13HNQ5TXbEi2AhvVb8xU1Iwt9Fos9FEamfoee+u/TOsn7GUWc04lz46n2bbTg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.6",
        "@esbuild/android-arm": "0.25.6",
        "@esbuild/android-arm64": "0.25.6",
        "@esbuild/android-x64": "0.25.6",
        "@esbuild/darwin-arm64": "0.25.6",
        "@esbuild/darwin-x64": "0.25.6",
        "@esbuild/freebsd-arm64": "0.25.6",
        "@esbuild/freebsd-x64": "0.25.6",
        "@esbuild/linux-arm": "0.25.6",
        "@esbuild/linux-arm64": "0.25.6",
        "@esbuild/linux-ia32": "0.25.6",
        "@esbuild/linux-loong64": "0.25.6",
        "@esbuild/linux-mips64el": "0.25.6",
        "@esbuild/linux-ppc64": "0.25.6",
        "@esbuild/linux-riscv64": "0.25.6",
        "@esbuild/linux-s390x": "0.25.6",
        "@esbuild/linux-x64": "0.25.6",
        "@esbuild/netbsd-arm64": "0.25.6",
        "@esbuild/netbsd-x64": "0.25.6",
        "@esbuild/openbsd-arm64": "0.25.6",
        "@esbuild/openbsd-x64": "0.25.6",
        "@esbuild/openharmony-arm64": "0.25.6",
        "@esbuild/sunos-x64": "0.25.6",
        "@esbuild/win32-arm64": "0.25.6",
        "@esbuild/win32-ia32": "0.25.6",
        "@esbuild/win32-x64": "0.25.6"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    }
  }
}
--------------------------------------------------------------------------------

FILE: project_snapshot.txt
--------------------------------------------------------------------------------
[ERROR: Unable to read project_snapshot.txt]
--------------------------------------------------------------------------------

FILE: public/api/data.php
--------------------------------------------------------------------------------
<?php
header('Content-Type: text/csv');
header('Access-Control-Allow-Origin: *'); // Allow CORS for local testing

// Sample data arrays for randomization
$names = [
    'Alice', 'Bob', 'Charlie', 'David', 'Emma', 'Frank', 'Grace', 'Hannah', 'Isaac', 'Julia',
    'Kevin', 'Laura', 'Mike', 'Nancy', 'Oliver', 'Patricia', 'Quincy', 'Rachel', 'Sam', 'Tara',
    'Ursula', 'Victor', 'Wendy', 'Xavier', 'Yvonne', 'Zach', 'Amelia', 'Ben', 'Clara', 'Daniel',
    'Ella', 'Finn', 'Gemma', 'Henry', 'Isabelle', 'Jack', 'Kylie', 'Liam', 'Mia', 'Noah'
];
$cities = [
    'New York', 'London', 'Paris', 'Tokyo', 'Sydney', 'Berlin', 'Toronto', 'Chicago', 'Mumbai', 'Rio',
    'Amsterdam', 'Singapore', 'Dubai', 'Seoul', 'Barcelona', 'Miami', 'Vancouver', 'Cape Town', 'Bangkok', 'Rome'
];

// Generate 50 records
$csvData = "Name,Age,City\n";
for ($i = 0; $i < 50; $i++) {
    $name = $names[array_rand($names)];
    $age = rand(18, 80); // Random age between 18 and 80
    $city = $cities[array_rand($cities)];
    $csvData .= "$name,$age,$city\n";
}

echo $csvData;
?>--------------------------------------------------------------------------------

FILE: public/assets/js/csv-grid.js
--------------------------------------------------------------------------------
"use strict";(()=>{var c=class extends HTMLElement{data=[];filteredData=[];sortDirection=1;sortColumn=-1;currentPage=1;rowsPerPage=10;searchQuery="";constructor(){super();let r=this.attachShadow({mode:"open"});r.innerHTML=`
      <style>
        :host {
          display: block;
          font-family: 'Helvetica', 'Arial', sans-serif;
          color: #2e3440;
        }
        .grid-container {
          background: #ffffff;
          border: 1px solid #d8dee9;
          border-radius: 8px;
          max-width: 100%;
          overflow-x: auto;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        table {
          width: 100%;
          border-collapse: collapse;
          table-layout: auto;
        }
        th {
          background: #d9e6f2;
          padding: 12px;
          cursor: pointer;
          user-select: none;
          text-align: left;
          font-size: 16px;
          font-weight: 600;
          color: #2e3440;
          border-bottom: 2px solid #d8dee9;
          transition: background 0.2s ease;
        }
        th:hover {
          background: #c8d7e8;
        }
        td {
          padding: 12px;
          font-size: 14px;
          border-bottom: 1px solid #d8dee9;
        }
        td.message-bubble {
          background: #f0f4f8;
          border-radius: 6px;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }
        tr:nth-child(even) {
          background: #e6f0fa;
        }
        th.sort-indicator::after {
          content: ' \u2195';
          font-size: 12px;
        }
        th.sort-ascending::after {
          content: ' \u2191';
          font-size: 12px;
        }
        th.sort-descending::after {
          content: ' \u2193';
          font-size: 12px;
        }
        .loading {
          padding: 12px;
          color: #5e81ac;
          font-size: 14px;
          text-align: center;
        }
        .error {
          padding: 12px;
          color: #d32f2f;
          font-size: 14px;
          text-align: center;
        }
        .pagination {
          margin-top: 16px;
          display: flex;
          align-items: center;
          gap: 12px;
          font-size: 14px;
          padding: 0 12px;
        }
        .pagination button {
          padding: 8px 16px;
          cursor: pointer;
          border: 1px solid #d8dee9;
          background: #ffffff;
          border-radius: 6px;
          font-family: 'Helvetica', 'Arial', sans-serif;
          font-size: 14px;
          color: #81a1c1;
          transition: background 0.2s ease, box-shadow 0.2s ease;
        }
        .pagination button:hover:not(:disabled) {
          background: #e6f0fa;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        .pagination button:disabled {
          cursor: not-allowed;
          color: #a3be8c;
          background: #f0f4f8;
        }
        .pagination select {
          padding: 8px;
          border: 1px solid #d8dee9;
          border-radius: 6px;
          font-family: 'Helvetica', 'Arial', sans-serif;
          font-size: 14px;
          color: #2e3440;
          background: #ffffff;
        }
        .pagination select:focus {
          outline: none;
          border-color: #81a1c1;
          box-shadow: 0 0 0 2px rgba(129, 161, 193, 0.2);
        }
        .pagination span {
          font-size: 14px;
          color: #2e3440;
        }
        .search-container {
          margin-bottom: 16px;
          padding: 0 12px;
        }
        .search-container input {
          padding: 8px 12px;
          width: 100%;
          max-width: 300px;
          border: 1px solid #d8dee9;
          border-radius: 6px;
          font-family: 'Helvetica', 'Arial', sans-serif;
          font-size: 14px;
          color: #2e3440;
          background: #ffffff;
        }
        .search-container input:focus {
          outline: none;
          border-color: #81a1c1;
          box-shadow: 0 0 0 2px rgba(129, 161, 193, 0.2);
        }
      </style>
      <div class="search-container">
        <input type="text" placeholder="Search..." class="search-input">
      </div>
      <div class="grid-container">
        <table role="grid">
          <thead></thead>
          <tbody></tbody>
        </table>
      </div>
      <div class="pagination">
        <button class="prev" disabled>Previous</button>
        <span class="page-info">Page 1 of 1</span>
        <button class="next">Next</button>
        <select class="rows-per-page">
          <option value="5">5 rows</option>
          <option value="10" selected>10 rows</option>
          <option value="20">20 rows</option>
          <option value="50">50 rows</option>
        </select>
      </div>
    `}static get observedAttributes(){return["data-src","rows-per-page"]}attributeChangedCallback(r,o,t){if(r==="data-src"&&t)this.loadCSV(t);else if(r==="rows-per-page"&&t){let e=parseInt(t,10);!isNaN(e)&&e>0&&(this.rowsPerPage=e,this.currentPage=1,this.renderTable(),this.updatePaginationControls())}}connectedCallback(){let r=this.getAttribute("data-src"),o=this.getAttribute("rows-per-page");if(o){let e=parseInt(o,10);!isNaN(e)&&e>0&&(this.rowsPerPage=e)}r&&this.loadCSV(r);let t=this.shadowRoot;t&&(t.querySelector(".prev")?.addEventListener("click",()=>{this.currentPage>1&&(this.currentPage--,this.renderTable(),this.updatePaginationControls())}),t.querySelector(".next")?.addEventListener("click",()=>{let e=Math.ceil((this.filteredData.length-1)/this.rowsPerPage);this.currentPage<e&&(this.currentPage++,this.renderTable(),this.updatePaginationControls())}),t.querySelector(".rows-per-page")?.addEventListener("change",e=>{let s=e.target;this.rowsPerPage=parseInt(s.value,10),this.currentPage=1,this.renderTable(),this.updatePaginationControls()}),t.querySelector(".search-input")?.addEventListener("input",e=>{this.searchQuery=e.target.value.toLowerCase(),this.applyFilter(),this.currentPage=1,this.renderTable(),this.updatePaginationControls()}),t.addEventListener("click",e=>{let s=e.target.closest("th");if(s){let a=Array.from(t.querySelectorAll("th")||[]).indexOf(s);this.sortTable(a)}}),t.addEventListener("keydown",e=>{let s=e.target.closest("th");if(s&&(e.key==="Enter"||e.key===" ")){e.preventDefault();let a=Array.from(t.querySelectorAll("th")||[]).indexOf(s);this.sortTable(a)}}))}async loadCSV(r){try{let o=this.shadowRoot?.querySelector("tbody");o&&(o.innerHTML='<tr><td class="loading">Loading...</td></tr>');let t=await fetch(r);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);let e=await t.text();this.data=this.parseCSV(e),this.filteredData=[...this.data],this.currentPage=1,this.renderTable(),this.updatePaginationControls()}catch(o){console.error("Fetch error:",o);let t=this.shadowRoot?.querySelector("tbody");t&&(t.innerHTML=`<tr><td class="error">Error: ${o.message}</td></tr>`)}}parseCSV(r){return r.trim().split(`
`).map(o=>o.split(",").map(t=>t.trim()))}applyFilter(){if(!this.searchQuery){this.filteredData=[...this.data];return}let r=this.data[0]??[];this.filteredData=[r,...this.data.slice(1).filter(o=>o.some(t=>t.toLowerCase().includes(this.searchQuery)))]}renderTable(){let r=this.filteredData[0]??[],o=this.filteredData.slice(1)??[],t=(this.currentPage-1)*this.rowsPerPage,e=t+this.rowsPerPage,s=o.slice(t,e),a=this.shadowRoot?.querySelector("thead"),i=this.shadowRoot?.querySelector("tbody");a&&i&&(a.innerHTML=`
        <tr>
          ${r.map((n,d)=>`<th role="columnheader" class="${d===this.sortColumn?this.sortDirection>0?"sort-ascending":"sort-descending":"sort-indicator"}">${n}</th>`).join("")}
        </tr>
      `,i.innerHTML=`
        ${s.map(n=>`
          <tr role="row">
            ${n.map(d=>`<td role="gridcell" class="message-bubble">${d}</td>`).join("")}
          </tr>
        `).join("")}
      `)}updatePaginationControls(){let r=this.filteredData.length-1,o=Math.ceil(r/this.rowsPerPage),t=this.shadowRoot;if(t){let e=t.querySelector(".prev"),s=t.querySelector(".next"),a=t.querySelector(".page-info"),i=t.querySelector(".rows-per-page");e.disabled=this.currentPage===1,s.disabled=this.currentPage===o||o===0,a.textContent=`Page ${this.currentPage} of ${o||1}`,i.value=this.rowsPerPage.toString()}}sortTable(r){this.sortColumn===r?this.sortDirection*=-1:this.sortDirection=1,this.sortColumn=r;let o=this.filteredData.slice(1),t=this.isColumnNumeric(r);o.sort((s,a)=>{let i=s[r]?.trim()??"",n=a[r]?.trim()??"";return t?(Number(i)-Number(n))*this.sortDirection:i.localeCompare(n)*this.sortDirection}),this.filteredData=[this.filteredData[0],...o],this.currentPage=1,this.renderTable(),this.updatePaginationControls(),(this.shadowRoot?.querySelectorAll("th")||[]).forEach((s,a)=>{s.classList.remove("sort-indicator","sort-ascending","sort-descending"),a===r?(s.classList.add(this.sortDirection>0?"sort-ascending":"sort-descending"),s.setAttribute("aria-sort",this.sortDirection>0?"ascending":"descending")):(s.classList.add("sort-indicator"),s.setAttribute("aria-sort","none"))})}isColumnNumeric(r){return this.filteredData.slice(1).every(t=>{let e=t[r]?.trim();return e!==void 0&&e!==""&&!isNaN(Number(e))})}};customElements.define("csv-grid",c);})();
--------------------------------------------------------------------------------

FILE: public/index.html
--------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CSV Grid Test</title>
  <link rel="icon" href="/favicon.ico">
  <style>
    body {
      font-family: 'Helvetica', 'Arial', sans-serif;
      background: #f0f4f8;
      color: #2e3440;
      margin: 0;
      padding: 32px 16px;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
    }
    h1 {
      font-size: 28px;
      font-weight: 600;
      color: #2e3440;
      margin-bottom: 24px;
      text-align: center;
      background: #ffffff;
      padding: 16px 24px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      border: 1px solid #d8dee9;
      max-width: 1200px;
      width: 100%;
    }
    csv-grid {
      max-width: 1200px;
      width: 100%;
      background: #ffffff;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      padding: 16px;
    }
    @media (max-width: 768px) {
      body {
        padding: 16px 8px;
      }
      h1 {
        font-size: 24px;
        padding: 12px 16px;
      }
      csv-grid {
        padding: 8px;
      }
    }
  </style>
</head>
<body>
  <h1>CSV Grid Component Test</h1>
  <csv-grid data-src="api/data.php" rows-per-page="10"></csv-grid>
  <script src="assets/js/csv-grid.js"></script>
</body>
</html>--------------------------------------------------------------------------------

FILE: README.md
--------------------------------------------------------------------------------
FlexData
FlexData is a lightweight, modular TypeScript-based Web Component suite for managing JSON data in a master-detail interface. It includes a sortable, paginated, and filterable data grid (<csv-grid>), a detail view for selected rows (<detail-view>), and a control panel for actions like exporting and column toggling (<control-panel>). Built with esbuild for bundling and served via PHP's built-in server, it uses Shadow DOM for style encapsulation and a centralized StateManager for reactive state updates. The components feature a modern, customizable design with a default Helvetica-based theme, fully configurable via CSS custom properties for flexible styling.
Prerequisites

Node.js (for esbuild and TypeScript)
PHP (for php -S)
npm (for installing dependencies)

Setup

Install dependencies:
npm install


Build the TypeScript code:
npm run build

This compiles src/components/*.ts and src/state-manager.ts to public/assets/js/.

Start the PHP server:
npm run serve

This runs php -S localhost:8000 -t public, serving files from the public/ directory.

Development mode (optional):
npm run watch

This rebuilds the JavaScript on file changes.

Open the project:Visit http://localhost:8000 to see the FlexData components.


Project Structure

src/components/csv-grid.ts: Sortable, paginated, filterable grid component.
src/components/detail-view.ts: Detail view for selected row data.
src/components/control-panel.ts: Controls for export, reset, and column toggling.
src/state-manager.ts: Centralized state manager for reactive updates.
public/assets/js/*.js: Compiled, minified JavaScript (production-ready).
public/index.html: Test HTML page with customizable styling.
public/api/data.php: PHP script to serve JSON data (50 records).
public/data.csv: Sample CSV file (optional fallback).
build.js: esbuild script to compile and bundle TypeScript.
tsconfig.json: TypeScript configuration.
package.json: Node.js configuration with scripts.
.gitignore: Ignores build artifacts, node modules, and temporary files.

Deployment to Production

Run npm run build to generate public/assets/js/*.js.
Copy the public/ directory (or specific files: assets/js/*.js, api/data.php, index.html) to the production server’s web root (e.g., /var/www/html/ for Apache/Nginx or static/ for Django).
Include in your production HTML:<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Your Page</title>
  <style>
    :root {
      /* Customize as needed */
      --font-family: 'Helvetica', 'Arial', sans-serif;
      --bg-body: #f0f4f8;
      --bg-primary: #ffffff;
      --bg-row-even: #e6f0fa;
      --bg-header: #d9e6f2;
      --bg-header-hover: #c8d7e8;
      --bg-cell-bubble: #f0f4f8;
      --bg-selected: #a3be8c;
      --text-primary: #2e3440;
      --text-secondary: #5e81ac;
      --text-button: #81a1c1;
      --text-disabled: #a3be8c;
      --text-error: #d32f2f;
      --border-color: #d8dee9;
      --shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      --border-radius: 8px;
      --padding: 16px;
      --padding-mobile: 8px;
      --font-size-header: 28px;
      --font-size-header-mobile: 24px;
      --font-size-cell: 14px;
      --font-size-cell-mobile: 13px;
    }
    body {
      font-family: var(--font-family);
      background: var(--bg-body);
      color: var(--text-primary);
      margin: 0;
      padding: 32px 16px;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
    }
    h1 {
      font-size: var(--font-size-header);
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: 24px;
      text-align: center;
      background: var(--bg-primary);
      padding: 16px 24px;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      border: 1px solid var(--border-color);
      max-width: 1200px;
      width: 100%;
    }
    csv-grid, control-panel, detail-view {
      max-width: 1200px;
      width: 100%;
      background: var(--bg-primary);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      padding: var(--padding);
    }
    @media (max-width: 768px) {
      body { padding: var(--padding-mobile); }
      h1 { font-size: var(--font-size-header-mobile); padding: var(--padding-mobile); }
      csv-grid, control-panel, detail-view { padding: var(--padding-mobile); }
    }
  </style>
</head>
<body>
  <h1>Your Data Suite</h1>
  <control-panel></control-panel>
  <csv-grid data-src="/api/data.php" rows-per-page="10"></csv-grid>
  <detail-view></detail-view>
  <script src="/assets/js/csv-grid.js"></script>
  <script src="/assets/js/detail-view.js"></script>
  <script src="/assets/js/control-panel.js"></script>
  <script src="/assets/js/state-manager.js"></script>
</body>
</html>


Ensure the server supports PHP (for data.php) and serves static files with correct MIME types (e.g., text/javascript for .js).

Usage
The FlexData suite provides a master-detail interface for JSON data:

<csv-grid data-src="/api/data.php" rows-per-page="10">: Displays a sortable, paginated, filterable grid. Click rows to select and view details.
<detail-view>: Shows selected row data in a card format.
<control-panel>: Offers buttons to export data as CSV, reset search, and toggle column visibility.
Features:
Sorting: Click or press Enter/Space on column headers to sort (numeric or alphabetic).
Pagination: Navigate with Previous/Next or select rows per page (5, 10, 20, 50).
Filtering: Search via an input field (case-insensitive, any column).
Column Toggling: Show/hide columns via checkboxes.
Export: Download filtered data as CSV.
Styling: Fully customizable via CSS variables (default: Helvetica, light theme). Override in :root or :host.
Accessibility: ARIA attributes (role="grid", aria-sort).


State Management: Centralized StateManager ensures reactive updates across components.

Customization
Override CSS variables in your HTML or CSS to customize the appearance:
:root {
  --bg-body: #f8f9fa;
  --bg-primary: #ffffff;
  --bg-row-even: #e9ecef;
  --font-family: 'Roboto', sans-serif;
  --text-button: #007bff;
  /* Add more as needed */
}

Expanding the Component Library

Add new components to src/components/ (e.g., src/components/chart-view.ts).
Update build.js to include new entry points:entryPoints: [
  { in: 'src/components/csv-grid.ts', out: 'csv-grid' },
  { in: 'src/components/detail-view.ts', out: 'detail-view' },
  { in: 'src/components/control-panel.ts', out: 'control-panel' },
  { in: 'src/state-manager.ts', out: 'state-manager' },
  { in: 'src/components/chart-view.ts', out: 'chart-view' }
]


For app-specific code, create src/app/app.ts and add to entryPoints.

Notes

The data source (api/data.php) returns JSON. For CSV fallback, consider Papa Parse:<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>


Components use Shadow DOM for style encapsulation; page styling is in index.html.
The public/ directory is self-contained for production.
The project is lightweight, using only TypeScript, esbuild, and native Web Components APIs.
--------------------------------------------------------------------------------

FILE: src/components/csv-grid.ts
--------------------------------------------------------------------------------
class CSVGrid extends HTMLElement {
  private data: string[][] = [];
  private filteredData: string[][] = [];
  private sortDirection: number = 1;
  private sortColumn: number = -1;
  private currentPage: number = 1;
  private rowsPerPage: number = 10;
  private searchQuery: string = '';

  constructor() {
    super();
    const shadow = this.attachShadow({ mode: 'open' });
    shadow.innerHTML = `
      <style>
        :host {
          display: block;
          font-family: 'Helvetica', 'Arial', sans-serif;
          color: #2e3440;
        }
        .grid-container {
          background: #ffffff;
          border: 1px solid #d8dee9;
          border-radius: 8px;
          max-width: 100%;
          overflow-x: auto;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        table {
          width: 100%;
          border-collapse: collapse;
          table-layout: auto;
        }
        th {
          background: #d9e6f2;
          padding: 12px;
          cursor: pointer;
          user-select: none;
          text-align: left;
          font-size: 16px;
          font-weight: 600;
          color: #2e3440;
          border-bottom: 2px solid #d8dee9;
          transition: background 0.2s ease;
        }
        th:hover {
          background: #c8d7e8;
        }
        td {
          padding: 12px;
          font-size: 14px;
          border-bottom: 1px solid #d8dee9;
        }
        td.message-bubble {
          background: #f0f4f8;
          border-radius: 6px;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }
        tr:nth-child(even) {
          background: #e6f0fa;
        }
        th.sort-indicator::after {
          content: ' ↕';
          font-size: 12px;
        }
        th.sort-ascending::after {
          content: ' ↑';
          font-size: 12px;
        }
        th.sort-descending::after {
          content: ' ↓';
          font-size: 12px;
        }
        .loading {
          padding: 12px;
          color: #5e81ac;
          font-size: 14px;
          text-align: center;
        }
        .error {
          padding: 12px;
          color: #d32f2f;
          font-size: 14px;
          text-align: center;
        }
        .pagination {
          margin-top: 16px;
          display: flex;
          align-items: center;
          gap: 12px;
          font-size: 14px;
          padding: 0 12px;
        }
        .pagination button {
          padding: 8px 16px;
          cursor: pointer;
          border: 1px solid #d8dee9;
          background: #ffffff;
          border-radius: 6px;
          font-family: 'Helvetica', 'Arial', sans-serif;
          font-size: 14px;
          color: #81a1c1;
          transition: background 0.2s ease, box-shadow 0.2s ease;
        }
        .pagination button:hover:not(:disabled) {
          background: #e6f0fa;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        .pagination button:disabled {
          cursor: not-allowed;
          color: #a3be8c;
          background: #f0f4f8;
        }
        .pagination select {
          padding: 8px;
          border: 1px solid #d8dee9;
          border-radius: 6px;
          font-family: 'Helvetica', 'Arial', sans-serif;
          font-size: 14px;
          color: #2e3440;
          background: #ffffff;
        }
        .pagination select:focus {
          outline: none;
          border-color: #81a1c1;
          box-shadow: 0 0 0 2px rgba(129, 161, 193, 0.2);
        }
        .pagination span {
          font-size: 14px;
          color: #2e3440;
        }
        .search-container {
          margin-bottom: 16px;
          padding: 0 12px;
        }
        .search-container input {
          padding: 8px 12px;
          width: 100%;
          max-width: 300px;
          border: 1px solid #d8dee9;
          border-radius: 6px;
          font-family: 'Helvetica', 'Arial', sans-serif;
          font-size: 14px;
          color: #2e3440;
          background: #ffffff;
        }
        .search-container input:focus {
          outline: none;
          border-color: #81a1c1;
          box-shadow: 0 0 0 2px rgba(129, 161, 193, 0.2);
        }
      </style>
      <div class="search-container">
        <input type="text" placeholder="Search..." class="search-input">
      </div>
      <div class="grid-container">
        <table role="grid">
          <thead></thead>
          <tbody></tbody>
        </table>
      </div>
      <div class="pagination">
        <button class="prev" disabled>Previous</button>
        <span class="page-info">Page 1 of 1</span>
        <button class="next">Next</button>
        <select class="rows-per-page">
          <option value="5">5 rows</option>
          <option value="10" selected>10 rows</option>
          <option value="20">20 rows</option>
          <option value="50">50 rows</option>
        </select>
      </div>
    `;
  }

  static get observedAttributes(): string[] {
    return ['data-src', 'rows-per-page'];
  }

  attributeChangedCallback(name: string, _oldValue: string | null, newValue: string | null): void {
    if (name === 'data-src' && newValue) {
      void this.loadCSV(newValue);
    } else if (name === 'rows-per-page' && newValue) {
      const rows = parseInt(newValue, 10);
      if (!isNaN(rows) && rows > 0) {
        this.rowsPerPage = rows;
        this.currentPage = 1;
        this.renderTable();
        this.updatePaginationControls();
      }
    }
  }

  connectedCallback(): void {
    const src = this.getAttribute('data-src');
    const rowsPerPage = this.getAttribute('rows-per-page');
    if (rowsPerPage) {
      const rows = parseInt(rowsPerPage, 10);
      if (!isNaN(rows) && rows > 0) {
        this.rowsPerPage = rows;
      }
    }
    if (src) {
      void this.loadCSV(src);
    }
    const shadow = this.shadowRoot;
    if (shadow) {
      shadow.querySelector('.prev')?.addEventListener('click', () => {
        if (this.currentPage > 1) {
          this.currentPage--;
          this.renderTable();
          this.updatePaginationControls();
        }
      });
      shadow.querySelector('.next')?.addEventListener('click', () => {
        const totalPages = Math.ceil((this.filteredData.length - 1) / this.rowsPerPage);
        if (this.currentPage < totalPages) {
          this.currentPage++;
          this.renderTable();
          this.updatePaginationControls();
        }
      });
      shadow.querySelector('.rows-per-page')?.addEventListener('change', (e: Event) => {
        const select = e.target as HTMLSelectElement;
        this.rowsPerPage = parseInt(select.value, 10);
        this.currentPage = 1;
        this.renderTable();
        this.updatePaginationControls();
      });
      shadow.querySelector('.search-input')?.addEventListener('input', (e: Event) => {
        this.searchQuery = (e.target as HTMLInputElement).value.toLowerCase();
        this.applyFilter();
        this.currentPage = 1;
        this.renderTable();
        this.updatePaginationControls();
      });
      shadow.addEventListener('click', (e: Event) => {
        const th = (e.target as HTMLElement).closest('th');
        if (th) {
          const index = Array.from(shadow.querySelectorAll('th') || []).indexOf(th);
          this.sortTable(index);
        }
      });
      shadow.addEventListener('keydown', (e: KeyboardEvent) => {
        const th = (e.target as HTMLElement).closest('th');
        if (th && (e.key === 'Enter' || e.key === ' ')) {
          e.preventDefault();
          const index = Array.from(shadow.querySelectorAll('th') || []).indexOf(th);
          this.sortTable(index);
        }
      });
    }
  }

  private async loadCSV(url: string): Promise<void> {
    try {
      const tbody = this.shadowRoot?.querySelector('tbody');
      if (tbody) {
        tbody.innerHTML = '<tr><td class="loading">Loading...</td></tr>';
      }
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const text = await response.text();
      this.data = this.parseCSV(text);
      this.filteredData = [...this.data]; // Initialize filtered data
      this.currentPage = 1;
      this.renderTable();
      this.updatePaginationControls();
    } catch (error) {
      console.error('Fetch error:', error);
      const tbody = this.shadowRoot?.querySelector('tbody');
      if (tbody) {
        tbody.innerHTML = `<tr><td class="error">Error: ${(error as Error).message}</td></tr>`;
      }
    }
  }

  private parseCSV(csvText: string): string[][] {
    return csvText
      .trim()
      .split('\n')
      .map(row => row.split(',').map(cell => cell.trim()));
  }

  private applyFilter(): void {
    if (!this.searchQuery) {
      this.filteredData = [...this.data];
      return;
    }
    const header = this.data[0] ?? [];
    this.filteredData = [header, ...this.data.slice(1).filter(row =>
      row.some(cell => cell.toLowerCase().includes(this.searchQuery))
    )];
  }

  private renderTable(): void {
    const headers = this.filteredData[0] ?? [];
    const body = this.filteredData.slice(1) ?? [];
    const startIndex = (this.currentPage - 1) * this.rowsPerPage;
    const endIndex = startIndex + this.rowsPerPage;
    const paginatedBody = body.slice(startIndex, endIndex);
    const thead = this.shadowRoot?.querySelector('thead');
    const tbody = this.shadowRoot?.querySelector('tbody');
    if (thead && tbody) {
      thead.innerHTML = `
        <tr>
          ${headers.map((h, i) => `<th role="columnheader" class="${i === this.sortColumn ? (this.sortDirection > 0 ? 'sort-ascending' : 'sort-descending') : 'sort-indicator'}">${h}</th>`).join('')}
        </tr>
      `;
      tbody.innerHTML = `
        ${paginatedBody.map(row => `
          <tr role="row">
            ${row.map(cell => `<td role="gridcell" class="message-bubble">${cell}</td>`).join('')}
          </tr>
        `).join('')}
      `;
    }
  }

  private updatePaginationControls(): void {
    const totalRows = this.filteredData.length - 1; // Exclude header
    const totalPages = Math.ceil(totalRows / this.rowsPerPage);
    const shadow = this.shadowRoot;
    if (shadow) {
      const prevButton = shadow.querySelector('.prev') as HTMLButtonElement;
      const nextButton = shadow.querySelector('.next') as HTMLButtonElement;
      const pageInfo = shadow.querySelector('.page-info');
      const rowsPerPageSelect = shadow.querySelector('.rows-per-page') as HTMLSelectElement;

      prevButton.disabled = this.currentPage === 1;
      nextButton.disabled = this.currentPage === totalPages || totalPages === 0;
      pageInfo.textContent = `Page ${this.currentPage} of ${totalPages || 1}`;
      rowsPerPageSelect.value = this.rowsPerPage.toString();
    }
  }

  private sortTable(columnIndex: number): void {
    if (this.sortColumn === columnIndex) {
      this.sortDirection *= -1;
    } else {
      this.sortDirection = 1;
    }
    this.sortColumn = columnIndex;

    const body = this.filteredData.slice(1);
    const isNumeric = this.isColumnNumeric(columnIndex);

    body.sort((rowA, rowB) => {
      const cellA = rowA[columnIndex]?.trim() ?? '';
      const cellB = rowB[columnIndex]?.trim() ?? '';
      if (isNumeric) {
        return (Number(cellA) - Number(cellB)) * this.sortDirection;
      }
      return cellA.localeCompare(cellB) * this.sortDirection;
    });

    this.filteredData = [this.filteredData[0], ...body];
    this.currentPage = 1;
    this.renderTable();
    this.updatePaginationControls();

    const ths = this.shadowRoot?.querySelectorAll('th') || [];
    ths.forEach((th: HTMLTableCellElement, index: number) => {
      th.classList.remove('sort-indicator', 'sort-ascending', 'sort-descending');
      if (index === columnIndex) {
        th.classList.add(this.sortDirection > 0 ? 'sort-ascending' : 'sort-descending');
        th.setAttribute('aria-sort', this.sortDirection > 0 ? 'ascending' : 'descending');
      } else {
        th.classList.add('sort-indicator');
        th.setAttribute('aria-sort', 'none');
      }
    });
  }

  private isColumnNumeric(columnIndex: number): boolean {
    const rows = this.filteredData.slice(1);
    return rows.every(row => {
      const cell = row[columnIndex]?.trim();
      return cell !== undefined && cell !== '' && !isNaN(Number(cell));
    });
  }
}

customElements.define('csv-grid', CSVGrid);--------------------------------------------------------------------------------

FILE: tsconfig.json
--------------------------------------------------------------------------------
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "outDir": "./public",
    "rootDir": "./src",
    "lib": ["DOM", "ESNext"]
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}--------------------------------------------------------------------------------

================================================================================

CONFIGURATION FILES
--------------------------------------------------------------------------------

FILE: package.json
--------------------------------------------------------------------------------
{
  "name": "flexdata",
  "version": "1.0.0",
  "scripts": {
    "build": "node build.js",
    "serve": "php -S localhost:8000 -t public",
    "watch": "node build.js --watch"
  },
  "dependencies": {
    "esbuild": "^0.21.5"
  }
}--------------------------------------------------------------------------------

FILE: .gitignore
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

FILE: tsconfig.json
--------------------------------------------------------------------------------
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "outDir": "./public",
    "rootDir": "./src",
    "lib": ["DOM", "ESNext"]
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}--------------------------------------------------------------------------------
